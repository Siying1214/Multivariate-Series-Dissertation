# Use the first-order difference of the training set as the mean part (no AR/MA) + sGARCH(1,1)
diff_train <- diff(train_data$GBP, differences = 1)

# --- Model 1: sGARCH(1,1) + Normal errors ---
spec_garch_norm <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model     = list(armaOrder = c(0, 0), include.mean = TRUE),
  distribution.model = "norm"
)
garch_fit_norm <- ugarchfit(spec = spec_garch_norm, data = diff_train)
cat("\nGARCH Model Fit (Normal):\n"); show(garch_fit_norm)

# Standardized residuals
std_resid_norm <- as.numeric(residuals(garch_fit_norm, standardize = TRUE))

# QQ plot (Normal)
dev.new()
qqnorm(std_resid_norm,
       main = "QQ Plot of Standardized Residuals (Normal errors)",
       xlab = "Theoretical Quantiles (Normal)",
       ylab = "Sample Quantiles")
qqline(std_resid_norm, col = "red"); grid()

# Histogram + Normal density
dev.new()
hist(std_resid_norm, breaks = 30, freq = FALSE, col = "lightblue", border = "white",
     main = "Histogram of Standardized Residuals (Normal errors)",
     xlab = "Standardized Residuals")
curve(dnorm(x, mean = mean(std_resid_norm), sd = sd(std_resid_norm)),
      add = TRUE, lwd = 2, col = "red")
grid()

# --- Model 2: sGARCH(1,1) + Student-t errors ---
spec_garch_std <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model     = list(armaOrder = c(0, 0), include.mean = TRUE),
  distribution.model = "std"   # Student-t
)
garch_fit_std <- ugarchfit(spec = spec_garch_std, data = diff_train)
cat("\nGARCH Model Fit (Student-t):\n"); show(garch_fit_std)

# Standardized residuals and estimated degrees of freedom (in rugarch, 'shape' is the df for t)
std_resid_std <- as.numeric(residuals(garch_fit_std, standardize = TRUE))
df_std <- as.numeric(garch_fit_std@fit$coef["shape"])

# QQ plot (Student-t, using estimated df)
dev.new()
qqplot(
  qt(ppoints(length(std_resid_std)), df = df_std), std_resid_std,
  main = sprintf("QQ Plot of Standardized Residuals (Student-t, df=%.2f)", df_std),
  xlab = "Theoretical Quantiles (Student-t)", ylab = "Sample Quantiles"
)
abline(0, 1, col = "red"); grid()

# Histogram + Student-t density
dev.new()
hist(std_resid_std, breaks = 30, freq = FALSE, col = "lightblue", border = "white",
     main = sprintf("Histogram of Standardized Residuals (Student-t, df=%.2f)", df_std),
     xlab = "Standardized Residuals")
m_std <- mean(std_resid_std); s_std <- sd(std_resid_std)
curve(dt((x - m_std) / s_std, df = df_std) / s_std, add = TRUE, lwd = 2, col = "red")
grid()

# ==============================================================================
# Forecasting (using the Student-t model)
# ==============================================================================
forecast_steps <- nrow(test_data)   

garch_forecast <- ugarchforecast(garch_fit_std, n.ahead = forecast_steps)
mu_hat   <- as.numeric(fitted(garch_forecast))  # Forecast mean of the differenced series
sigmahat <- as.numeric(sigma(garch_forecast))   # Forecast standard deviation of the differenced series

last_train_value <- as.numeric(tail(train_data$GBP, 1))

forecast_df <- tibble(
  Date          = test_data$Date,
  Mean_Forecast = mu_hat,
  Sigma         = sigmahat
) %>%
  mutate(
    Forecast_Level = cumsum(Mean_Forecast) + last_train_value,
    Lower_95 = Forecast_Level - qt(0.975, df = df_std) * Sigma,
    Upper_95 = Forecast_Level + qt(0.975, df = df_std) * Sigma
  )

print(forecast_df)

# Visualization
ggplot(forecast_df, aes(Date)) +
  geom_ribbon(aes(ymin = Lower_95, ymax = Upper_95), fill = "#cceeff", alpha = 0.3) +
  geom_line(aes(y = Forecast_Level), color = "blue") +
  labs(title = "Forecast of GBP/USD Exchange Rate (sGARCH(1,1) with t errors)",
       x = "Date", y = "Predicted Exchange Rate") +
  scale_x_date(date_labels = "%Y-%m-%d") +
  theme_minimal()
